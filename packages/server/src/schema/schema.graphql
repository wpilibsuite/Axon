scalar DateTime
scalar Upload

type Query {
  isDockerConnected: Boolean!
  dockerVersion: String!

  dataset(id: ID!): Dataset
  datasets: [Dataset!]!
  project(id: ID!): Project
  exportjobs: [Exportjob!]!
  trainjobs: [Trainjob!]!
  testjobs: [Testjob!]!
  projects: [Project!]!
  dockerState: DockerState!
}

type Mutation {
  resetDocker: Boolean!

  createDataset(upload: Upload!): Dataset

  createProject(name: String!): Project
  updateProject(id: ID!, updates: ProjectUpdateInput!): Project!
  setDatasetInProject(projectId: ID!, datasetId: ID!, isIncluded: Boolean): Project!

  startTraining(id: ID!): Project
  haltTraining(id: ID!): Project
  pauseTraining(id: ID!): Project
  resumeTraining(id: ID!): Project
  saveVideo(projectId: ID!, videoName: String!, video: Upload!): Video
  exportCheckpoint(id: ID!, checkpointNumber: Int!, name: String!): Project
  testModel(testName: String!, projectID: String!, exportID: String!, videoID: String!): Project
  databaseTest(id: ID!): Project
}

enum DockerState {
  NO_DOCKER
  SCANNING_FOR_DOCKER
  TRAIN_PULL
  EXPORT_PULL
  TEST_PULL
  READY
}

type DockerImage {
  name: String!
  tag: String!
}

type Size {
  width: Int!
  height: Int!
}

type Point {
  x: Int!
  y: Int!
}

type ObjectLabel {
  className: String!
  points: [Point!]!
}

type LabeledImage {
  path: String!
  size: Size!
  tags: [String!]!
  object_labels: [ObjectLabel!]!
}

type Dataset {
  id: ID!
  name: String!
  path: String!

  classes: [String!]!
  tags: [String!]!

  images: [LabeledImage!]!
}

type TrainingMetric {
  name: String!
  value: Float!
}

type CheckpointStatus {
  exporting: Boolean!
  downloadPaths: [String!]!
}

type Checkpoint {
  step: Int!
  status: CheckpointStatus!
  metrics: [TrainingMetric!]!
}

type Export {
  id: String!
  projectId: ID!
  name: String!
  directory: String!
  tarfileName: String!
  downloadPath: String!
  relativeDirPath: String!
}

type Video {
  id: String!
  name: String!
  filename: String!
  fullPath: String!
}

type Test {
  id: String!
  name: String!
  video: Video!
  model: Export!
  exportID: String!
  directory: String!
}

type Project {
  id: ID!
  name: String!
  initialCheckpoint: String!
  datasets: [Dataset!]!

  directory: String!

  epochs: Int!
  batchSize: Int!
  evalFrequency: Int!
  percentEval: Float!

  checkpoints: [Checkpoint!]!
  exports: [Export!]!
  videos: [Video!]!
  tests: [Test!]!
}

enum TrainStatus {
  Idle
  Paused
  Writing
  Cleaning
  Moving
  Extracting
  Training
  Stopped
}

type Trainjob {
  status: TrainStatus!
  projectID: String!
  currentEpoch: Int
  lastEpoch: Int
}

type Exportjob {
  checkpointID: String!
  projectID: String!
  exportID: String!
}

type Testjob {
  testID: String!
  exportID: String!
  projectID: String!
  streamPort: String!
}

input ProjectUpdateInput {
  name: String

  datasets: [String!]
  initialCheckpoint: String

  epochs: Int
  batchSize: Int
  evalFrequency: Int
  percentEval: Float
}
